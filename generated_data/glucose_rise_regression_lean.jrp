Local Here(
	(table1 = New Table( "df_output_combined 3",
		Add Rows( 96 ),
		New Script(
			"Source",
			Open(
				"$DOCUMENTS/Python_Scripts/cgm_analyzer_app/generated_data/df_output_combined.csv",
				columns(
					New Column( "event_time",
						Numeric,
						"Continuous",
						Format( "m/d/y h:m", 19 ),
						Input Format( "m/d/y h:m" )
					),
					New Column( "user", Character, "Nominal" ),
					New Column( "event_note", Character, "Nominal" ),
					New Column( "window_start",
						Numeric,
						"Continuous",
						Format( "m/d/y h:m", 19 ),
						Input Format( "m/d/y h:m" )
					),
					New Column( "window_end",
						Numeric,
						"Continuous",
						Format( "m/d/y h:m", 19 ),
						Input Format( "m/d/y h:m" )
					),
					New Column( "glucose_max",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "glucose_min",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "glucose_auc",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "glucose_rate_rise",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "glucose_rate_fall",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "exercise_within_3h",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "meal_time_category",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "meal_type", Character, "Nominal" ),
					New Column( "source", Character, "Nominal" ),
					New Column( "estimated_total_weight_g",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "llm_notes", Character, "Nominal" ),
					New Column( "Segmented List", Character, "Nominal" ),
					New Column( "Protein",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "Carbs",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					),
					New Column( "Fat", Numeric, "Continuous", Format( "Best", 12 ) ),
					New Column( "Calories",
						Numeric,
						"Continuous",
						Format( "Best", 12 )
					)
				),
				Import Settings(
					End Of Line( CRLF, CR, LF ),
					End Of Field( Comma, CSV( 1 ) ),
					Treat Leading Zeros as Character( 1 ),
					Strip Quotes( 1 ),
					Use Apostrophe as Quotation Mark( 0 ),
					Use Regional Settings( 0 ),
					Scan Whole File( 1 ),
					Treat empty columns as numeric( 0 ),
					CompressNumericColumns( 0 ),
					CompressCharacterColumns( 0 ),
					CompressAllowListCheck( 0 ),
					Labels( 1 ),
					Column Names Start( 1 ),
					First Named Column( 1 ),
					Data Starts( 2 ),
					Lines To Read( "All" ),
					Year Rule( "20xx" )
				)
			)
		),
		New Column( "event_time",
			Numeric,
			"Continuous",
			Format( "m/d/y h:m", 19 ),
			Input Format( "m/d/y h:m" ),
			Set Values(
				[3739785420, 3739792380, 3739810440, 3739876920, 3739901160,
				3739961040, 3739966680, 3739984380, 3740042280, 3740051040,
				3740068080, 3740130120, 3740144400, 3740160900, 3740211600,
				3740218140, 3740247000, 3740302320, 3740313660, 3740331960,
				3740390040, 3740413920, 3740415780, 3740461140, 3740474400,
				3740505600, 3740557020, 3740590860, 3740656320, 3740681700, .,
				3739785360, 3739792320, 3739810860, 3739876920, 3739901400,
				3739955580, 3739984380, 3740034000, 3740042460, 3740052600,
				3740068200, 3740113800, 3740122020, 3740129220, 3740144400,
				3740160600, 3740212140, 3740218200, 3740221800, 3740246940,
				3740302380, 3740312640, 3740331960, 3740373960, 3740388060,
				3740396700, 3740413860, 3740462100, 3740473620, 3740483700,
				3740505960, 3740549520, 3740560200, 3740589660, 3740637480,
				3740666400, 3740680800, 3808748400, 3808759440, 3808805400,
				3808820760, 3808840140, 3808902600, 3808913400, 3808928700,
				3808970400, 3808980000, 3808988100, 3809013600, 3809059800,
				3809063280, 3809075400, 3809094000, 3809104500, 3809109900,
				3809154000, 3809187000, 3809249100, 3809281800, 3809344500,
				3809442000, 3809675820, 3809680800, 3809705700, 3809767800]
			)
		),
		New Column( "user",
			Character,
			"Nominal",
			Set Selected,
			Set Values(
				{"user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "user_cl",
				"user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "user_cl",
				"user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "user_cl",
				"user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "user_cl",
				"user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "user_cl", "",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh", "user_jh",
				"user_jh", "user_jh", "user_jh", "user_jh", "user_jh"}
			)
		),
		New Column( "event_note",
			Character,
			"Nominal",
			Set Values(
				{"MBR pork bone soup, romaine lettuce, gnocchi creamy sauce",
				"Snack pastry egg tart durian choux",
				"Kimchi Dumpling, maitake mushroom, spinach eggplant masala, ice cream",
				"Rice chicken fried egg roti tofu veggies",
				"Pizza, ceviche, maitake mushroom", "Pempek & quinoa salad",
				"Potato chip", "Pempek, quinoa salad", "Ceviche on salad bed",
				"Brown rice cracker", "Chipotle bowl", "Chipotle bowl",
				"Potato chip", "Salmon asparagus broccoli carrot cauliflower",
				"Kuih x4, fish ball, fried tofu",
				"Sandwich pesto, pasta, salad, chicken sandwich",
				"Chickfila sandwich, veggies",
				"Quinoa salad, broccoli/cauliflower, chicken chickfila, spring mix",
				"Kueh", "Soto betawi, white rice, chilli tofu tempeh",
				"Tempeh tofu, soto betawi", "Soto betawi, tofu tempeh",
				"Rice at the end of meals with furikake", "Kombucha",
				"Soto betawi, white rice, tofu tempeh",
				"Pesto pasta, chicken, salad, tomato, cucumber", "Soto betawi",
				"Pesto pasta, salad", "Chipotle bowl",
				"Rose sauce pasta shisito tomato spinach", "",
				"Pork bone soup lettuce gnocci with sauce", "Eat pastry",
				"Maitake dimpling eggplant spinach masala cracker then ice cream",
				"Eat Aman cafe roti", "Eat pizza ceviche maitakr",
				"Ceviche and cheese", "Eat fish cake quinoa and chocolate",
				"Drank coconut water", "Ate ceviche salad and nut crackers",
				"Ate 1 piece chocolate krackel", "Chipotle chicken",
				"Energy bar 5g sugar", "Fruit snacks",
				"Chicken apple sandwich whole wheat bread", "Potato chips",
				"Salmon broccoli cauliflower carrot asparagus", "Kuih",
				"Picnic caprese sandwich pasta chicken sandwich", "Cookie",
				"Fried chicken and veggies",
				"Broccoli cauliflower fried chicken quinoa salad avocado", "Kuih",
				"Soto betawi and tofu tempeh. Rice", "Kombucha",
				"Soto betawi tofu tempeh cucumber", "Chocolate cookie",
				"Soto betawi tofu tempeh cucumber rice", "Kombucha",
				"Soto betawi rice tofu tempeh", "1 nectarine",
				"Pesto chicken salad pasta", "Twix bar", "BJ's pizza",
				"Pasta pesto chicken and salad", "Small kitkat",
				"Two dark chocolate piece",
				"Pea pasta rose sauce salad tomato avocado", "Chips",
				"Chicken soup and salty Chinese greens",
				"Juice with berries, protein powder, chia seeds, oat milk",
				"Lunch eggs raw tomato cucumber salad greens, avocado, crackers",
				"Popeye 3 piece, biscuit, salad greens, Cajun fries, cucumber",
				"Eggs, salad greens, tomato, rice, chocolate peanut butter cup",
				"Handful of chocolate almonda",
				"Homemade tomato pasta, shrimp, veggies, meatballs",
				"Tofu, electrolytes, juice", "Chips", "Pasta, peanut butter cup",
				"Pasta,sardine, cucumber, dragon fruit",
				"Juice with berries, protein powder, chia seeds, oat milk", "Chips",
				"Pasta, 4 oreos", "String cheese, Tillamook cheese",
				"Korean tofu soup, pork, banchan, egg",
				"Brownie, fruit, cheesecake at PP loinge",
				"Kopitiam, indonesian fried rice, pastries, coffee, vegetables",
				"Wedding banquet", "Pizza", "Dim sum", "Duck buns, sen jian bao",
				"Burmese noodles, tea leaf salad, curry with rice",
				"Juice with berries, protein powder, chia seeds, oat milk",
				"Tuna, tomato, greens, cracker, ice cream",
				"Fish, quinoa, roasted veggies, pineapple",
				"Chicken Skewer, Rice, Salad and tomatos,"}
			)
		),
		New Column( "window_start",
			Numeric,
			"Continuous",
			Format( "m/d/y h:m", 19 ),
			Input Format( "m/d/y h:m" ),
			Set Values(
				[3739785420, 3739792380, 3739810440, 3739876920, 3739901160,
				3739961040, 3739966680, 3739984380, 3740042280, 3740051040,
				3740068080, 3740130120, 3740144400, 3740160900, 3740211600,
				3740218140, 3740247000, 3740302320, 3740313660, 3740331960,
				3740390040, 3740413920, 3740415780, 3740461140, 3740474400,
				3740505600, 3740557020, 3740590860, 3740656320, 3740681700, .,
				3739785360, 3739792320, 3739810860, 3739876920, 3739901400,
				3739955580, 3739984380, 3740034000, 3740042460, 3740052600,
				3740068200, 3740113800, 3740122020, 3740129220, 3740144400,
				3740160600, 3740212140, 3740218200, 3740221800, 3740246940,
				3740302380, 3740312640, 3740331960, 3740373960, 3740388060,
				3740396700, 3740413860, 3740462100, 3740473620, 3740483700,
				3740505960, 3740549520, 3740560200, 3740589660, 3740637480,
				3740666400, 3740680800, 3808748400, 3808759440, 3808805400,
				3808820760, 3808840140, 3808902600, 3808913400, 3808928700,
				3808970400, 3808980000, 3808988100, 3809013600, 3809059800,
				3809063280, 3809075400, 3809094000, 3809104500, 3809109900,
				3809154000, 3809187000, 3809249100, 3809281800, 3809344500,
				3809442000, 3809675820, 3809680800, 3809705700, 3809767800]
			)
		),
		New Column( "window_end",
			Numeric,
			"Continuous",
			Format( "m/d/y h:m", 19 ),
			Input Format( "m/d/y h:m" ),
			Set Values(
				[3739792380, 3739799580, 3739817640, 3739884120, 3739908360,
				3739966680, 3739973880, 3739991580, 3740049480, 3740058240,
				3740075280, 3740137320, 3740151600, 3740168100, 3740218140,
				3740225340, 3740254200, 3740309520, 3740320860, 3740339160,
				3740397240, 3740415780, 3740422980, 3740468340, 3740481600,
				3740512800, 3740564220, 3740598060, 3740663520, 3740688900, .,
				3739792320, 3739799520, 3739818060, 3739884120, 3739908600,
				3739962780, 3739991580, 3740041200, 3740049660, 3740059800,
				3740075400, 3740121000, 3740129220, 3740136420, 3740151600,
				3740167800, 3740218200, 3740221800, 3740229000, 3740254140,
				3740309580, 3740319840, 3740339160, 3740381160, 3740395260,
				3740403900, 3740421060, 3740469300, 3740480820, 3740490900,
				3740513160, 3740556720, 3740567400, 3740596860, 3740644680,
				3740673600, 3740688000, 3808755600, 3808766640, 3808812600,
				3808827960, 3808847340, 3808909800, 3808920600, 3808935900,
				3808977600, 3808987200, 3808995300, 3809020800, 3809063280,
				3809070480, 3809082600, 3809101200, 3809109900, 3809117100,
				3809161200, 3809194200, 3809256300, 3809289000, 3809351700,
				3809449200, 3809680800, 3809688000, 3809712900, 3809775000]
			)
		),
		New Column( "glucose_max",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[131, 109, 169, 154, 138, 177, 115, 130, 110, 163, 138, 168, 124,
				128, 229, 111, 137, 144, 146, 147, 119, 99, 176, 135, 167, 133, 128,
				136, 150, 111, ., 158, 135, 217, 156, 110, 117, 187, 134, 157, 124,
				151, 123, 127, 135, 159, 109, 171, 111, 130, 164, 127, 209, 132, 118,
				134, 150, 144, 149, 174, 137, 146, 155, 178, 144, 139, 134, 166, 136,
				160, 134, 116, 168, 116, 106, 128, 98, 101, 129, 138, 124, 126, 183,
				95, 182, 133, 157, 105, 111, ., 173, 177, 116, 102, 158, 179]
			)
		),
		New Column( "glucose_min",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[85, 90, 108, 79, 97, 94, 96, 86, 93, 103, 92, 96, 95, 93, 85, 85,
				102, 100, 101, 99, 99, 94, 115, 88, 95, 103, 95, 83, 91, 95, ., 101,
				99, 98, 95, 101, 112, 98, 98, 101, 93, 110, 104, 97, 109, 115, 91,
				92, 100, 118, 98, 106, 105, 105, 95, 100, 120, 95, 89, 98, 106, 102,
				100, 99, 137, 102, 108, 116, 112, 99, 88, 96, 138, 104, 90, 96, 84,
				86, 86, 101, 84, 75, 84, 82, 80, 133, 92, 89, 90, ., 81, 80, 84, 82,
				94, 77]
			)
		),
		New Column( "glucose_auc",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[26.19166667, 15.45, 86.625, 54.19166667, 53.76666667, 68.775,
				28.125, 40.75, 25.43333333, 72.26666667, 39.18333333, 68.825, 49.125,
				36.48333333, 107.775, 22.7, 47.96666667, 55.45833333, 63.625, 59.95,
				37.20833333, 1.625, 111.5, 35.95, 88.5, 48.875, 39.73333333,
				41.01666667, 71.125, 18.25, ., 56.80833333, 32.3, 138.1, 72.25,
				29.51666667, 44.05833333, 122.875, 45.625, 78.03333333, 22.875, 86,
				40.875, 33.375, 57.5, 82.5, 26.375, 47.35833333, 9.875, 57, 72.5,
				46.5, 120.75, 61.93333333, 26.5, 55.875, 89.875, 58.425, 40.03333333,
				110.5, 61.025, 66, 61.75, 109.25, 12.625, 49, 56.5, 102.1333333,
				70.25, 84.48333333, 45.625, 37.625, 115.375, 42.45, 23.50833333,
				52.7, 11.375, 11.375, 35.25, 62.875, 17.5, 29, 105.45, 6.875, 73.5,
				0, 40.175, 19.875, 28, ., 86.03333333, 105.125, 22.625, 13.375,
				76.36666667, 99.5]
			)
		),
		New Column( "glucose_rate_rise",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[66.03550296, 28, 98, 114, 64, 138, 14, 72, 28, 90.76069731, 78, 122,
				56, 54.00950872, 183.9936609, 46, 54, 84, 62, 88, 39.22345483, ., 90,
				86, 100, 52, 38, 42, 74, 32, ., 100, 22, 176, 86, 12, 10, 142, 46,
				112, -2, 82, 38, 40, 44, 76, 36, 113.866878, 22, 14, 108, 36, 134,
				44, 32, 46, 48, 42, 37.90568655, 122, 10, 79.76421637, 34, 146, .,
				74, 40, 100, 38, 96, 70, 40, 46, 16, 32, 61.9556172, 20, 26, 80, 60,
				80, 88, 124, 22, 172, ., 126.5742025, 24, 24, ., 134, 142, 64, 32,
				101.1963589, 114]
			)
		),
		New Column( "glucose_rate_fall",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[-81.83431953, -28.38351823, -112, -48, -46, -111.251981, -38, -56,
				-12, -96, -73.977813, -120.1426307, -6, -38.65464632, -238, -40, -54,
				-63.94611727, -52, -67.46434231, -20, ., -54, -56, -66, -32,
				-41.17274168, 14, -24, -30, ., -73.40236686, -66, -104, 2,
				-15.56171983, -2, -16, -42, -42, -32, -32, -26, -48, -24, -62, -12,
				-158, 8, -2, -74, -30, -36, -50, -38, -24, -20, -0.00000000000000126,
				-90, -14, -42, -44, -82, -30, ., -58, -28, -10.6161602, -26, -84,
				-70, -34, -46, -22, -20, -46, -14, -28, -78, -48, 16, -94,
				-102.6373626, -10, -56, ., -22, -22, -30, ., -105.1737452, -94, -38,
				-26, -90, -40]
			)
		),
		New Column( "exercise_within_3h",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 1, ., 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
				0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0]
			)
		),
		New Column( "meal_time_category",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[2, 2, 4, 2, 5, 2, 2, 4, 2, 2, 4, 2, 3, 5, 2, 2, 5, 2, 3, 5, 2, 4, 4,
				1, 2, 5, 2, 5, 2, 5, ., 2, 2, 4, 2, 5, 2, 4, 1, 2, 2, 4, 1, 1, 2, 3,
				5, 2, 2, 2, 5, 2, 2, 5, 1, 2, 2, 4, 1, 2, 2, 5, 1, 2, 4, 1, 4, 5, 3,
				4, 1, 2, 4, 2, 2, 4, 0, 1, 2, 4, 1, 1, 2, 3, 4, 5, 1, 4, 2, 5, 2, 4,
				2, 2, 4, 2]
			)
		),
		New Column( "meal_type",
			Character,
			"Nominal",
			Set Values(
				{"meal", "snack", "meal", "meal", "meal", "meal", "snack", "meal",
				"meal", "snack", "meal", "meal", "snack", "meal", "meal", "meal",
				"meal", "meal", "snack", "meal", "meal", "meal", "light", "drink",
				"meal", "meal", "meal", "meal", "meal", "meal", "", "meal", "snack",
				"meal", "snack", "meal", "meal", "meal", "drink", "meal", "snack",
				"meal", "snack", "snack", "meal", "snack", "meal", "snack", "meal",
				"snack", "meal", "meal", "snack", "meal", "drink", "meal", "snack",
				"meal", "drink", "meal", "snack", "meal", "snack", "meal", "meal",
				"snack", "snack", "meal", "snack", "meal", "meal", "meal", "meal",
				"meal", "snack", "meal", "light", "snack", "meal", "meal", "meal",
				"snack", "meal", "snack", "meal", "meal", "meal", "meal", "meal",
				"meal", "meal", "meal", "meal", "meal", "meal", "meal"}
			)
		),
		New Column( "source",
			Character,
			"Nominal",
			Set Values(
				{"homemade", "processed", "homemade", "homemade", "homemade",
				"homemade", "processed", "homemade", "homemade", "processed",
				"restaurant", "restaurant", "processed", "homemade", "homemade",
				"homemade", "restaurant", "homemade", "processed", "homemade",
				"homemade", "homemade", "homemade", "processed", "homemade",
				"homemade", "homemade", "homemade", "restaurant", "homemade", "",
				"homemade", "processed", "homemade", "cafe", "restaurant",
				"homemade", "restaurant", "processed", "restaurant", "processed",
				"restaurant", "processed", "processed", "homemade", "processed",
				"homemade", "processed", "homemade", "processed", "restaurant",
				"homemade", "processed", "homemade", "processed", "homemade",
				"processed", "homemade", "processed", "homemade", "fresh",
				"homemade", "processed", "restaurant", "homemade", "processed",
				"processed", "homemade", "processed", "homemade", "homemade",
				"homemade", "restaurant", "homemade", "processed", "homemade",
				"homemade", "processed", "homemade", "homemade", "homemade",
				"processed", "homemade", "processed", "restaurant", "restaurant",
				"restaurant", "restaurant", "restaurant", "restaurant", "restaurant",
				"restaurant", "homemade", "homemade", "homemade", "homemade"}
			)
		),
		New Column( "estimated_total_weight_g",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[520, 230, 520, 520, 520, 520, 195, 520, 520, 110, 585, 585, 195,
				520, 520, 520, 520, 520, 140, 520, 520, 520, 250, 325, 520, 520, 400,
				520, 585, 520, ., 585, 195, 585, 195, 585, 585, 585, 325, 585, 40,
				585, 195, 195, 585, 195, 585, 195, 585, 195, 585, 585, 195, 585, 325,
				585, 195, 585, 325, 585, 140, 585, 195, 585, 585, 90, 50, 585, 195,
				585, 585, 585, 700, 585, 60, 585, 400, 195, 585, 585, 585, 195, 585,
				120, 650, 650, 700, 800, 585, 585, 585, 650, 585, 585, 585, 585]
			)
		),
		New Column( "llm_notes",
			Character,
			"Nominal",
			Set Values(
				{"Full plate with soup, greens, and pasta.",
				"Dense sweet pastry mix; larger snack.",
				"Mixed plate with veg, spice, and dessert.",
				"Balanced protein + starch + veg + fried egg.",
				"Dense multi-protein, light veg meal.",
				"Balanced fermented fish + starch + veg.",
				"Classic processed snack.", "Same as above (repeated).",
				"Lean protein + greens = complete light meal.",
				"Light crunchy snack, scaled down.", "Standard full Chipotle entrÈe",
				"Standard full Chipotle entrÈe", "Single salty packaged snack",
				"Protein + multiple vegetables ó full clean meal",
				"Dense starch, protein, and tofu ó complete meal",
				"Two sandwich items + sides ó balanced meal",
				"Fast food sandwich plus veg", "Clean protein + grains + greens",
				"Sweet rice dessert ó light snack",
				"Balanced soup + protein + grains", "Protein + soup = balanced meal",
				"Similar to above", "Small rice portion with seasoning",
				"Beverage-only entry", "Full protein + carb + soup meal",
				"Full plate: starch + protein + veg",
				"Soup alone ó still interpreted as light meal",
				"Balanced carb + veg meal", "Restaurant entrÈe",
				"Veg-rich pasta plate", "",
				"Multi-item cooked dish with protein, vegetables, and starch.",
				"Single baked item, sweet and calorie-dense.",
				"Several savory items and dessert; interpreted as full meal.",
				"Single cafe item, likely bread-based.",
				"Contains protein, carbs, and multiple items.",
				"Light but protein-rich combo; sufficient for full meal.",
				"Multi-item log with protein (fish cake), starch (quinoa), and dessert (chocolate). Treated as a full meal.",
				"Single liquid item, commonly consumed as a drink.",
				"Multiple components including protein (ceviche), veg, and crackers.",
				"Quantity cue: ‚Äú1 piece‚Äù ? scaled down snack.",
				"Presumed to be a burrito/bowl-sized entr√©e.",
				"Standard single-pack bar.",
				"Classic packaged item, sugar-dominant.",
				"Multi-component sandwich, protein + fruit + bread = full meal.",
				"Single salty packaged item; typical snack.",
				"Full plate with protein and multiple vegetables.",
				"Rice-flour dessert; treat like cake.",
				"Multi-item picnic meal including sandwiches and pasta.",
				"Single baked item, standard snack portion.",
				"Entr√©e + sides, interpreted as full meal.",
				"Full plate with protein, grains, and multiple vegetables.",
				"Rice-flour dessert; treat like cake.",
				"Traditional soup with plant proteins and rice; full meal.",
				"Fermented beverage; low calories.",
				"Similar components without rice; still qualifies as a meal.",
				"Single sweet snack item.",
				"Soup + proteins + veg + rice = complete homemade meal.",
				"Fermented beverage; low calories.",
				"Soup, plant protein, and rice ‚Äî interpreted as a full homemade meal.",
				"Fresh fruit with quantity cue ? lighter snack.",
				"Protein + veg + starch = complete plate.", "Full bar assumed.",
				"Restaurant entr√©e ‚Äî assumed substantial.",
				"Multi-component meal: grain + protein + greens.",
				"‚ÄúSmall‚Äù cue triggers smaller portion estimate.",
				"‚ÄúTwo piece‚Äù cue ? portion size scaled down.",
				"Vegetarian full plate with pasta, sauce, and sides.",
				"Single-item processed snack.",
				"Balanced homemade meal: soup + veg.",
				"Nutrient-dense smoothie treated as a full blended meal.",
				"Multiple proteins, veg, and starch.",
				"Large fast food meal with 5+ components.",
				"Balanced meal with dessert included.",
				"Quantity cue ? small sweet snack portion.",
				"Pasta + protein + veg = full homemade meal.",
				"Light meal w/ drink and plant protein.", "Classic processed snack.",
				"Small dessert included ‚Äî still treated as meal.",
				"Balanced fish + carb + fruit meal.", "High-calorie smoothie meal.",
				"Classic processed snack.", "Pasta main with dessert included.",
				"Cheese-only snack, no clear starch or veg.",
				"Korean set meal, protein-rich with sides.",
				"Dessert-dominant lounge meal; dense and calorie-rich.",
				"Diverse street food meal.",
				"Special event meal, large variety assumed.",
				"Default single-plate pizza meal.",
				"Assumed mixed dim sum plate (savory, dense).",
				"Two dense dim sum dishes; full meal equivalent.",
				"Multi-dish ethnic meal with carbs and fat.",
				"Nutrient-dense blended drink, treated as meal.",
				"Balanced plate with protein and dessert.",
				"Clean protein, whole grains, fiber, and fruit.",
				"Protein + starch + veg; complete."}
			)
		),
		New Column( "Segmented List",
			Character,
			"Nominal",
			Set Values(
				{
				"[\!"pork bone soup\!", \!"romaine lettuce\!", \!"gnocchi creamy sauce\!"]",
				"[\!"pastry\!", \!"egg tart\!", \!"durian choux\!"]",
				"[\!"kimchi dumpling\!", \!"maitake mushroom\!", \!"spinach\!", \!"eggplant masala\!", \!"ice cream\!"]",
				"[\!"rice\!", \!"chicken\!", \!"fried egg\!", \!"roti\!", \!"tofu\!", \!"veggies\!"]",
				"[\!"pizza\!", \!"ceviche\!", \!"maitake mushroom\!"]",
				"[\!"pempek\!", \!"quinoa salad\!"]", "[\!"potato chip\!"]",
				"[\!"pempek\!", \!"quinoa salad\!"]", "[\!"ceviche\!", \!"salad\!"]",
				"[\!"brown rice cracker\!"]", "[\!"chipotle bowl\!"]",
				"[\!"chipotle bowl\!"]", "[\!"potato chip\!"]",
				"[\!"salmon\!", \!"asparagus\!", \!"broccoli\!", \!"carrot\!", \!"cauliflower\!"]",
				"[\!"kuih\!", \!"fish ball\!", \!"fried tofu\!"]",
				"[\!"pesto sandwich\!", \!"pasta\!", \!"salad\!", \!"chicken sandwich\!"]",
				"[\!"chickfila sandwich\!", \!"veggies\!"]",
				"[\!"quinoa salad\!", \!"broccoli/cauliflower\!", \!"chicken chickfila\!", \!"spring mix\!"]",
				"[\!"kueh\!"]",
				"[\!"soto betawi\!", \!"white rice\!", \!"chilli tofu\!", \!"tempeh\!"]",
				"[\!"tempeh\!", \!"tofu\!", \!"soto betawi\!"]",
				"[\!"soto betawi\!", \!"tofu\!", \!"tempeh\!"]",
				"[\!"rice\!", \!"furikake\!"]", "[\!"kombucha\!"]",
				"[\!"soto betawi\!", \!"white rice\!", \!"tofu\!", \!"tempeh\!"]",
				"[\!"pesto pasta\!", \!"chicken\!", \!"salad\!", \!"tomato\!", \!"cucumber\!"]",
				"[\!"soto betawi\!"]", "[\!"pesto pasta\!", \!"salad\!"]",
				"[\!"chipotle bowl\!"]",
				"[\!"rose sauce pasta\!", \!"shisito pepper\!", \!"tomato\!", \!"spinach\!"]",
				"",
				"[\!"pork bone soup\!", \!"lettuce\!", \!"gnocci\!", \!"sauce\!"]",
				"[\!"pastry\!"]",
				"[\!"maitake\!", \!"dimpling\!", \!"eggplant\!", \!"spinach\!", \!"masala\!", \!"cracker\!", \!"ice cream\!"]",
				"[\!"Aman cafe roti\!"]",
				"[\!"pizza\!", \!"ceviche\!", \!"maitakr\!"]",
				"[\!"ceviche\!", \!"cheese\!"]",
				"[\!"fish cake\!", \!"quinoa\!", \!"chocolate\!"]",
				"[\!"coconut water\!"]",
				"[\!"ceviche\!", \!"salad\!", \!"nut crackers\!"]",
				"[\!"chocolate krackel\!"]", "[\!"chipotle chicken\!"]",
				"[\!"energy bar\!"]", "[\!"fruit snacks\!"]",
				"[\!"chicken\!", \!"apple\!", \!"whole wheat bread\!"]",
				"[\!"potato chips\!"]",
				"[\!"salmon\!", \!"broccoli\!", \!"cauliflower\!", \!"carrot\!", \!"asparagus\!"]",
				"[\!"kuih\!"]",
				"[\!"caprese sandwich\!", \!"pasta\!", \!"chicken sandwich\!"]",
				"[\!"cookie\!"]", "[\!"fried chicken\!", \!"veggies\!"]",
				"[\!"broccoli\!", \!"cauliflower\!", \!"fried chicken\!", \!"quinoa\!", \!"salad\!", \!"avocado\!"]",
				"[\!"kuih\!"]",
				"[\!"soto betawi\!", \!"tofu\!", \!"tempeh\!", \!"rice\!"]",
				"[\!"kombucha\!"]",
				"[\!"soto betawi\!", \!"tofu\!", \!"tempeh\!", \!"cucumber\!"]",
				"[\!"chocolate cookie\!"]",
				"[\!"soto betawi\!", \!"tofu\!", \!"tempeh\!", \!"cucumber\!", \!"rice\!"]",
				"[\!"kombucha\!"]",
				"[\!"soto betawi\!", \!"rice\!", \!"tofu\!", \!"tempeh\!"]",
				"[\!"nectarine\!"]",
				"[\!"pesto chicken\!", \!"salad\!", \!"pasta\!"]",
				"[\!"twix bar\!"]", "[\!"BJ's pizza\!"]",
				"[\!"pasta\!", \!"pesto chicken\!", \!"salad\!"]", "[\!"kitkat\!"]",
				"[\!"dark chocolate\!"]",
				"[\!"pea pasta\!", \!"rose sauce\!", \!"salad\!", \!"tomato\!", \!"avocado\!"]",
				"[\!"chips\!"]", "[\!"chicken soup\!", \!"salty Chinese greens\!"]",
				"[\!"juice\!", \!"berries\!", \!"protein powder\!", \!"chia seeds\!", \!"oat milk\!"]",
				"[\!"eggs\!", \!"raw tomato\!", \!"cucumber\!", \!"salad greens\!", \!"avocado\!", \!"crackers\!"]",
				"[\!"Popeye 3 piece\!", \!"biscuit\!", \!"salad greens\!", \!"Cajun fries\!", \!"cucumber\!"]",
				"[\!"eggs\!", \!"salad greens\!", \!"tomato\!", \!"rice\!", \!"chocolate peanut butter cup\!"]",
				"[\!"chocolate almonds\!"]",
				"[\!"tomato pasta\!", \!"shrimp\!", \!"veggies\!", \!"meatballs\!"]",
				"[\!"tofu\!", \!"electrolytes\!", \!"juice\!"]", "[\!"chips\!"]",
				"[\!"pasta\!", \!"peanut butter cup\!"]",
				"[\!"pasta\!", \!"sardine\!", \!"cucumber\!", \!"dragon fruit\!"]",
				"[\!"juice\!", \!"berries\!", \!"protein powder\!", \!"chia seeds\!", \!"oat milk\!"]",
				"[\!"chips\!"]", "[\!"pasta\!", \!"oreos\!"]",
				"[\!"string cheese\!", \!"Tillamook cheese\!"]",
				"[\!"Korean tofu soup\!", \!"pork\!", \!"banchan\!", \!"egg\!"]",
				"[\!"brownie\!", \!"fruit\!", \!"cheesecake\!"]",
				"[\!"Indonesian fried rice\!", \!"pastries\!", \!"coffee\!", \!"vegetables\!"]",
				"[\!"wedding banquet\!"]", "[\!"pizza\!"]", "[\!"dim sum\!"]",
				"[\!"duck buns\!", \!"sen jian bao\!"]",
				"[\!"Burmese noodles\!", \!"tea leaf salad\!", \!"curry\!", \!"rice\!"]",
				"[\!"juice\!", \!"berries\!", \!"protein powder\!", \!"chia seeds\!", \!"oat milk\!"]",
				"[\!"tuna\!", \!"tomato\!", \!"greens\!", \!"cracker\!", \!"ice cream\!"]",
				"[\!"fish\!", \!"quinoa\!", \!"roasted veggies\!", \!"pineapple\!"]",
				"[\!"chicken skewer\!", \!"rice\!", \!"salad\!", \!"tomatoes\!"]"}
			)
		),
		New Column( "Protein",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[22, 5, 14, 38, 32, 28, 3, 28, 25, 2, 35, 35, 3, 40, 37, 42, 35, 38,
				3, 38, 38, 38, 3, 0, 38, 39, 6, 9, 35, 12, ., 52, 7, 36, 6, 56, 42,
				51, 0, 50, 0.6, 55, 20, 1, 55.5, 4, 35.5, 3, 46, 4, 49, 28.4, 3, 39,
				0, 37, 4, 33.5, 0, 42.5, 1.2, 45, 3, 40, 40, 1.5, 1.5, 19, 3, 36, 38,
				25.5, 54.5, 27, 4, 51, 20, 3, 19, 36, 38, 3, 16, 12, 44, 11, 16, 40,
				35, 25, 35, 17, 38, 39, 43, 41]
			)
		),
		New Column( "Carbs",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[60, 45, 58, 64, 55, 52, 32, 52, 12, 15, 60, 60, 32, 20, 57, 75, 40,
				55, 28, 45, 17, 17, 38, 15, 45, 51, 6, 48, 60, 54, ., 36, 49, 68, 28,
				66, 5, 110, 15, 45, 10, 45, 28, 45, 64, 45, 24.5, 50, 107, 50, 20,
				61, 50, 64, 15, 23, 48, 60, 15, 57, 18, 52, 49, 75, 53, 23, 11, 42,
				35, 12, 55, 30, 68, 53, 12, 54, 29, 35, 95, 69, 65, 35, 110, 1, 16,
				100, 110, 90, 75, 65, 65, 87, 55, 46, 52, 54]
			)
		),
		New Column( "Fat",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[18, 25, 20, 24, 18, 16, 28, 16, 8, 3, 22, 22, 28, 10, 19, 28, 20,
				16, 4, 20, 23, 23, 2, 0, 20, 10, 8, 5, 22, 6, ., 36, 29, 40, 7, 34,
				24, 51, 0, 33, 6, 18, 12, 0.5, 12, 30, 13, 10, 29, 22, 22, 25, 10,
				26, 0, 25, 20, 21, 0, 28, 0, 25, 21, 30, 21, 10, 7, 27, 30, 12, 12,
				32, 42, 25, 10, 18, 8, 30, 19, 12, 12, 30, 16, 10, 32, 36, 22, 40,
				25, 25, 22, 23, 12, 19, 15, 9]
			)
		),
		New Column( "Calories",
			Numeric,
			"Continuous",
			Format( "Best", 12 ),
			Set Values(
				[540, 480, 565, 670, 580, 520, 480, 520, 330, 130, 720, 720, 480,
				450, 720, 810, 600, 620, 200, 600, 470, 470, 190, 60, 600, 570, 150,
				310, 720, 440, ., 740, 546, 990, 240, 970, 510, 1210, 60, 810, 130,
				680, 370, 220, 600, 500, 370, 400, 1000, 480, 520, 570, 400, 710, 60,
				505, 460, 623, 60, 705, 60, 670, 510, 850, 630, 240, 600, 525, 500,
				360, 500, 540, 940, 610, 180, 700, 300, 500, 780, 600, 500, 500, 780,
				170, 630, 870, 930, 1000, 800, 750, 750, 780, 500, 550, 560, 465]
			)
		),
		Set Row States(
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		)
	)) << Run Formulas;
	table1 << Fit Model(
		Y( :glucose_rate_rise ),
		Effects(
			:user, :exercise_within_3h, :meal_time_category,
			:user * :meal_time_category, :user * :Carbs, :Carbs
		),
		Personality( "Standard Least Squares" ),
		History(
			Effects(
				:user, :exercise_within_3h, :meal_time_category,
				:user * :meal_time_category, :user * :Carbs, :Protein, :Carbs
			),
			Effects(
				:user, :exercise_within_3h, :user * :exercise_within_3h,
				:meal_time_category, :user * :meal_time_category, :user * :Carbs,
				:Protein, :Carbs
			),
			Effects(
				:user, :exercise_within_3h, :user * :exercise_within_3h,
				:meal_time_category, :user * :meal_time_category, :user * :Carbs,
				:Protein, :Carbs, :Fat
			),
			Effects(
				:user, :exercise_within_3h, :user * :exercise_within_3h,
				:meal_time_category, :user * :meal_time_category, :user * :Carbs,
				:Protein, :Carbs, :Fat, :Calories
			)
		),
		Emphasis( "Effect Screening" ),
		Run(
			:glucose_rate_rise << {Summary of Fit( 1 ), Analysis of Variance( 0 ),
			Parameter Estimates( 1 ), Sorted Estimates( 0 ),
			Plot Actual by Predicted( 1 ), Plot Regression( 0 ),
			Plot Residual by Predicted( 1 ), Plot Studentized Residuals( 1 ),
			Plot Effect Leverage( 0 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Profiler(
				1,
				Confidence Intervals( 1 ),
				Arrange in Rows( 4 ),
				Term Value(
					:user( "user_cl", Lock( 0 ), Show( 1 ) ),
					:exercise_within_3h( 0.1538, Lock( 0 ), Show( 1 ) ),
					:meal_time_category( 2.6923, Lock( 0 ), Show( 1 ) ),
					:Carbs( 46.51, Lock( 0 ), Show( 1 ) )
				)
			)}
		),
		SendToReport(
			Dispatch( {}, "Parameter Estimates", OutlineBox, {Close( 0 )} ),
			Dispatch( {"Parameter Estimates"}, "VIF", NumberColBox,
				{Visibility( "Visible" )}
			)
		)
	);
)